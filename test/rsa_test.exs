defmodule RsaTest do
  use ExUnit.Case

  @test_public_key "-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0
FPqri0cb2JZfXJ/DgYSF6vUpwmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/
3j+skZ6UtW+5u09lHNsj6tQ51s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQAB
-----END PUBLIC KEY-----"

  @test_public_key_decoded {:RSAPublicKey,
  119_445_732_379_544_598_056_145_200_053_932_732_877_863_846_799_652_384_989_588_303_737_527_328_743_970_559_883_211_146_487_286_317_168_142_202_446_955_508_902_936_035_124_709_397_221_178_664_495_721_428_029_984_726_868_375_359_168_203_283_442_617_134_197_706_515_425_366_188_396_513_684_446_494_070_223_079_865_755_643_116_690_165_578_452_542_158_755_074_958_452_695_530_623_055_205_290_232_290_667_934_914_919,
                            65537}

  @test_private_key "-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0FPqri0cb2JZfXJ/DgYSF6vUp
wmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/3j+skZ6UtW+5u09lHNsj6tQ5
1s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQABAoGAFijko56+qGyN8M0RVyaRAXz++xTqHBLh
3tx4VgMtrQ+WEgCjhoTwo23KMBAuJGSYnRmoBZM3lMfTKevIkAidPExvYCdm5dYq3XToLkkLv5L2
pIIVOFMDG+KESnAFV7l2c+cnzRMW0+b6f8mR1CJzZuxVLL6Q02fvLi55/mbSYxECQQDeAw6fiIQX
GukBI4eMZZt4nscy2o12KyYner3VpoeE+Np2q+Z3pvAMd/aNzQ/W9WaI+NRfcxUJrmfPwIGm63il
AkEAxCL5HQb2bQr4ByorcMWm/hEP2MZzROV73yF41hPsRC9m66KrheO9HPTJuo3/9s5p+sqGxOlF
L0NDt4SkosjgGwJAFklyR1uZ/wPJjj611cdBcztlPdqoxssQGnh85BzCj/u3WqBpE2vjvyyvyI5k
X6zk7S0ljKtt2jny2+00VsBerQJBAJGC1Mg5Oydo5NwD6BiROrPxGo2bpTbu/fhrT8ebHkTz2epl
U9VQQSQzY1oZMVX8i1m5WUTLPz2yLJIBQVdXqhMCQBGoiuSoSjafUhV7i1cEGpb88h5NBYZzWXGZ
37sJ5QsW+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=
-----END RSA PRIVATE KEY-----"

  @test_private_key_decoded {:RSAPrivateKey, :"two-prime",
  119_445_732_379_544_598_056_145_200_053_932_732_877_863_846_799_652_384_989_588_303_737_527_328_743_970_559_883_211_146_487_286_317_168_142_202_446_955_508_902_936_035_124_709_397_221_178_664_495_721_428_029_984_726_868_375_359_168_203_283_442_617_134_197_706_515_425_366_188_396_513_684_446_494_070_223_079_865_755_643_116_690_165_578_452_542_158_755_074_958_452_695_530_623_055_205_290_232_290_667_934_914_919,
  65537,
  15_561_097_747_174_142_518_018_336_482_604_905_218_597_151_593_381_327_540_795_351_287_227_189_722_080_971_669_177_056_757_380_572_439_714_941_551_979_891_282_989_271_219_231_408_722_926_338_365_571_654_978_607_893_958_475_513_953_370_159_409_670_998_537_225_496_707_103_101_579_959_463_821_567_722_828_752_898_977_700_114_600_659_869_336_789_019_676_485_627_997_391_114_080_902_742_115_482_118_336_774_562_577,
  11_627_708_886_355_621_199_735_412_802_139_569_467_434_585_415_329_927_587_631_124_833_895_119_494_317_513_796_736_733_307_101_074_383_089_140_602_809_318_017_663_635_247_723_052_449_998_061_148_241_098_917,
  10_272_507_984_759_283_768_184_415_823_001_782_212_803_274_857_375_688_280_678_837_373_891_542_550_268_707_041_884_550_332_766_324_551_399_377_658_257_839_771_525_050_268_735_407_698_239_431_037_942_292_507,
  1_167_259_666_498_827_103_362_364_478_466_762_706_963_274_752_391_101_112_333_875_067_247_447_871_478_934_392_308_634_335_221_599_529_522_917_680_484_039_599_588_157_167_626_988_755_489_833_899_847_081_645,
  7_621_032_557_593_132_674_563_902_554_742_659_153_893_343_101_461_210_307_076_700_977_401_783_577_774_612_891_701_919_857_934_166_440_538_766_515_436_385_973_287_142_669_273_605_103_927_542_861_220_260_371,
  924_843_845_674_297_687_057_332_936_270_821_194_408_196_365_601_586_008_771_941_767_943_794_433_626_762_616_882_201_525_008_354_242_744_253_244_251_523_660_525_258_633_929_842_398_544_395_182_793_155_229,
  :asn1_NOVALUE}

  test "RSA.decode_key (public)" do
    pubkey = RSA.decode_key(@test_public_key)
    assert pubkey == @test_public_key_decoded
  end

  test "RSA.decode_key (private)" do
    privkey = RSA.decode_key(@test_private_key)
    assert privkey == @test_private_key_decoded
  end

  test "RSA.encrypt/decrypt (public/private)" do
    plaintext = "hello world"
    cyphertext = plaintext |> RSA.encrypt({:public, @test_public_key_decoded})
    new_plaintext = cyphertext |> RSA.decrypt({:private, @test_private_key_decoded})
    assert new_plaintext == plaintext
  end

  test "RSA.encrypt/decrypt (private/public)" do
    plaintext = "hello world"
    cyphertext = plaintext |> RSA.encrypt({:private, @test_private_key_decoded})
    new_plaintext = cyphertext |> RSA.decrypt({:public, @test_public_key_decoded})
    assert new_plaintext == plaintext
  end
end
